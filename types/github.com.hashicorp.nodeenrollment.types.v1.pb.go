// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: types/github.com.hashicorp.nodeenrollment.types.v1.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KEYTYPE is an enum holding known key types
type KEYTYPE int32

const (
	KEYTYPE_UNSPECIFIED KEYTYPE = 0
	KEYTYPE_ED25519     KEYTYPE = 1
	KEYTYPE_X25519      KEYTYPE = 2
)

// Enum value maps for KEYTYPE.
var (
	KEYTYPE_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ED25519",
		2: "X25519",
	}
	KEYTYPE_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ED25519":     1,
		"X25519":      2,
	}
)

func (x KEYTYPE) Enum() *KEYTYPE {
	p := new(KEYTYPE)
	*p = x
	return p
}

func (x KEYTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KEYTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_enumTypes[0].Descriptor()
}

func (KEYTYPE) Type() protoreflect.EnumType {
	return &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_enumTypes[0]
}

func (x KEYTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KEYTYPE.Descriptor instead.
func (KEYTYPE) EnumDescriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{0}
}

// CertificateBundle contains information about a certificate the its issuing
// certificate
type CertificateBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateDer       []byte                 `protobuf:"bytes,1,opt,name=certificate_der,proto3" json:"certificate_der,omitempty"`
	CaCertificateDer     []byte                 `protobuf:"bytes,2,opt,name=ca_certificate_der,proto3" json:"ca_certificate_der,omitempty"`
	CertificateNotBefore *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=certificate_not_before,proto3" json:"certificate_not_before,omitempty"`
	CertificateNotAfter  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=certificate_not_after,proto3" json:"certificate_not_after,omitempty"`
}

func (x *CertificateBundle) Reset() {
	*x = CertificateBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateBundle) ProtoMessage() {}

func (x *CertificateBundle) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateBundle.ProtoReflect.Descriptor instead.
func (*CertificateBundle) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateBundle) GetCertificateDer() []byte {
	if x != nil {
		return x.CertificateDer
	}
	return nil
}

func (x *CertificateBundle) GetCaCertificateDer() []byte {
	if x != nil {
		return x.CaCertificateDer
	}
	return nil
}

func (x *CertificateBundle) GetCertificateNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.CertificateNotBefore
	}
	return nil
}

func (x *CertificateBundle) GetCertificateNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.CertificateNotAfter
	}
	return nil
}

// RootCertificate contains information about a root CA certificate and its
// associated public/private keys
type RootCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // "current" or "next"
	PublicKeyPkix   []byte                 `protobuf:"bytes,2,opt,name=public_key_pkix,proto3" json:"public_key_pkix,omitempty"`
	PrivateKeyPkcs8 []byte                 `protobuf:"bytes,4,opt,name=private_key_pkcs8,proto3" json:"private_key_pkcs8,omitempty"`
	PrivateKeyType  KEYTYPE                `protobuf:"varint,5,opt,name=private_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"private_key_type,omitempty"`
	CertificateDer  []byte                 `protobuf:"bytes,6,opt,name=certificate_der,proto3" json:"certificate_der,omitempty"`
	NotBefore       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=not_before,proto3" json:"not_before,omitempty"`
	NotAfter        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=not_after,proto3" json:"not_after,omitempty"`
}

func (x *RootCertificate) Reset() {
	*x = RootCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootCertificate) ProtoMessage() {}

func (x *RootCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootCertificate.ProtoReflect.Descriptor instead.
func (*RootCertificate) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{1}
}

func (x *RootCertificate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RootCertificate) GetPublicKeyPkix() []byte {
	if x != nil {
		return x.PublicKeyPkix
	}
	return nil
}

func (x *RootCertificate) GetPrivateKeyPkcs8() []byte {
	if x != nil {
		return x.PrivateKeyPkcs8
	}
	return nil
}

func (x *RootCertificate) GetPrivateKeyType() KEYTYPE {
	if x != nil {
		return x.PrivateKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

func (x *RootCertificate) GetCertificateDer() []byte {
	if x != nil {
		return x.CertificateDer
	}
	return nil
}

func (x *RootCertificate) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *RootCertificate) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

// RootCertificates is a message that holds two root certificates for easy
// usage/identification. The ID will always be "roots".
type RootCertificates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Current *RootCertificate `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
	Next    *RootCertificate `protobuf:"bytes,3,opt,name=next,proto3" json:"next,omitempty"`
	// If set, the key ID of the wrapping key used to encrypt the private key
	WrappingKeyId string `protobuf:"bytes,30,opt,name=wrapping_key_id,proto3" json:"wrapping_key_id,omitempty"`
	// State is data that the implementor of a Store can use to round-trip data
	// through this library; as an example, a verison number on the resource for
	// implementing transactions.
	State *structpb.Struct `protobuf:"bytes,50,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RootCertificates) Reset() {
	*x = RootCertificates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootCertificates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootCertificates) ProtoMessage() {}

func (x *RootCertificates) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootCertificates.ProtoReflect.Descriptor instead.
func (*RootCertificates) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{2}
}

func (x *RootCertificates) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RootCertificates) GetCurrent() *RootCertificate {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *RootCertificates) GetNext() *RootCertificate {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *RootCertificates) GetWrappingKeyId() string {
	if x != nil {
		return x.WrappingKeyId
	}
	return ""
}

func (x *RootCertificates) GetState() *structpb.Struct {
	if x != nil {
		return x.State
	}
	return nil
}

// EncryptionKey contains the key information necessary to generate a sharedKey
// NodeInformation and NodeCredentials will store their previous encryption key
// using this message type
type EncryptionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId           string  `protobuf:"bytes,1,opt,name=key_id,proto3" json:"key_id,omitempty"`
	PrivateKeyPkcs8 []byte  `protobuf:"bytes,2,opt,name=private_key_pkcs8,proto3" json:"private_key_pkcs8,omitempty"`
	PrivateKeyType  KEYTYPE `protobuf:"varint,3,opt,name=private_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"private_key_type,omitempty"`
	PublicKeyPkix   []byte  `protobuf:"bytes,4,opt,name=public_key_pkix,proto3" json:"public_key_pkix,omitempty"`
	PublicKeyType   KEYTYPE `protobuf:"varint,5,opt,name=public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"public_key_type,omitempty"`
}

func (x *EncryptionKey) Reset() {
	*x = EncryptionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionKey) ProtoMessage() {}

func (x *EncryptionKey) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionKey.ProtoReflect.Descriptor instead.
func (*EncryptionKey) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{3}
}

func (x *EncryptionKey) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *EncryptionKey) GetPrivateKeyPkcs8() []byte {
	if x != nil {
		return x.PrivateKeyPkcs8
	}
	return nil
}

func (x *EncryptionKey) GetPrivateKeyType() KEYTYPE {
	if x != nil {
		return x.PrivateKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

func (x *EncryptionKey) GetPublicKeyPkix() []byte {
	if x != nil {
		return x.PublicKeyPkix
	}
	return nil
}

func (x *EncryptionKey) GetPublicKeyType() KEYTYPE {
	if x != nil {
		return x.PublicKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

// NodeInformation contains server-side information about a node: its
// certificate public key, any issued certificates (purely for informational
// purposes), its encryption public key and the corresponding server private
// key. Nonce may or may not have a value depending on the flow used to register
// the node and the current state of that flow. The first seen value can be
// useful for display to an operator looking to authorize a node. Authorized
// stores whether or not this node is authorized; technically we could derive
// this based on whether we have complete key/certificate information, but it's
// nice to be explicit.
//
// The ID corresponds to a key identifier generated by this library's
// KeyIdFromPkix function; unlike RootCertificate or NodeCredentials, which will
// only have at most two active values, here we need to identify an incoming
// node's information so use the actual key ID. Rotation simply means a new
// entry will be added with the new ID.
type NodeInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CertificatePublicKeyPkix        []byte               `protobuf:"bytes,2,opt,name=certificate_public_key_pkix,proto3" json:"certificate_public_key_pkix,omitempty"`
	CertificatePublicKeyType        KEYTYPE              `protobuf:"varint,3,opt,name=certificate_public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"certificate_public_key_type,omitempty"`
	CertificateBundles              []*CertificateBundle `protobuf:"bytes,6,rep,name=certificate_bundles,proto3" json:"certificate_bundles,omitempty"`
	EncryptionPublicKeyBytes        []byte               `protobuf:"bytes,10,opt,name=encryption_public_key_bytes,proto3" json:"encryption_public_key_bytes,omitempty"`
	EncryptionPublicKeyType         KEYTYPE              `protobuf:"varint,11,opt,name=encryption_public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"encryption_public_key_type,omitempty"`
	ServerEncryptionPrivateKeyBytes []byte               `protobuf:"bytes,12,opt,name=server_encryption_private_key_bytes,proto3" json:"server_encryption_private_key_bytes,omitempty"`
	ServerEncryptionPrivateKeyType  KEYTYPE              `protobuf:"varint,13,opt,name=server_encryption_private_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"server_encryption_private_key_type,omitempty"`
	RegistrationNonce               []byte               `protobuf:"bytes,20,opt,name=registration_nonce,proto3" json:"registration_nonce,omitempty"`
	// If set, the key ID of the wrapping key used to encrypt the private key and
	// the nonce
	WrappingKeyId string `protobuf:"bytes,30,opt,name=wrapping_key_id,proto3" json:"wrapping_key_id,omitempty"`
	// State is data that the implementor of a Store can use to round-trip data
	// through this library; as an example, a verison number on the resource for
	// implementing transactions.
	State                 *structpb.Struct `protobuf:"bytes,50,opt,name=state,proto3" json:"state,omitempty"`
	PreviousEncryptionKey *EncryptionKey   `protobuf:"bytes,60,opt,name=previous_encryption_key,proto3" json:"previous_encryption_key,omitempty"`
}

func (x *NodeInformation) Reset() {
	*x = NodeInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInformation) ProtoMessage() {}

func (x *NodeInformation) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInformation.ProtoReflect.Descriptor instead.
func (*NodeInformation) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{4}
}

func (x *NodeInformation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeInformation) GetCertificatePublicKeyPkix() []byte {
	if x != nil {
		return x.CertificatePublicKeyPkix
	}
	return nil
}

func (x *NodeInformation) GetCertificatePublicKeyType() KEYTYPE {
	if x != nil {
		return x.CertificatePublicKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

func (x *NodeInformation) GetCertificateBundles() []*CertificateBundle {
	if x != nil {
		return x.CertificateBundles
	}
	return nil
}

func (x *NodeInformation) GetEncryptionPublicKeyBytes() []byte {
	if x != nil {
		return x.EncryptionPublicKeyBytes
	}
	return nil
}

func (x *NodeInformation) GetEncryptionPublicKeyType() KEYTYPE {
	if x != nil {
		return x.EncryptionPublicKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

func (x *NodeInformation) GetServerEncryptionPrivateKeyBytes() []byte {
	if x != nil {
		return x.ServerEncryptionPrivateKeyBytes
	}
	return nil
}

func (x *NodeInformation) GetServerEncryptionPrivateKeyType() KEYTYPE {
	if x != nil {
		return x.ServerEncryptionPrivateKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

func (x *NodeInformation) GetRegistrationNonce() []byte {
	if x != nil {
		return x.RegistrationNonce
	}
	return nil
}

func (x *NodeInformation) GetWrappingKeyId() string {
	if x != nil {
		return x.WrappingKeyId
	}
	return ""
}

func (x *NodeInformation) GetState() *structpb.Struct {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NodeInformation) GetPreviousEncryptionKey() *EncryptionKey {
	if x != nil {
		return x.PreviousEncryptionKey
	}
	return nil
}

// NodeCredentials is the corresponding struct for NodeInformation on the node
// side, containing the values necessary for proving identity. At various points
// in registration/authorization flows this may have some or all fields filled in.
type NodeCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // "current" or "next"
	CertificatePublicKeyPkix       []byte               `protobuf:"bytes,2,opt,name=certificate_public_key_pkix,proto3" json:"certificate_public_key_pkix,omitempty"`
	CertificatePrivateKeyPkcs8     []byte               `protobuf:"bytes,4,opt,name=certificate_private_key_pkcs8,proto3" json:"certificate_private_key_pkcs8,omitempty"`
	CertificatePrivateKeyType      KEYTYPE              `protobuf:"varint,5,opt,name=certificate_private_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"certificate_private_key_type,omitempty"`
	CertificateBundles             []*CertificateBundle `protobuf:"bytes,6,rep,name=certificate_bundles,proto3" json:"certificate_bundles,omitempty"`
	EncryptionPrivateKeyBytes      []byte               `protobuf:"bytes,10,opt,name=encryption_private_key_bytes,proto3" json:"encryption_private_key_bytes,omitempty"`
	EncryptionPrivateKeyType       KEYTYPE              `protobuf:"varint,11,opt,name=encryption_private_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"encryption_private_key_type,omitempty"`
	ServerEncryptionPublicKeyBytes []byte               `protobuf:"bytes,12,opt,name=server_encryption_public_key_bytes,proto3" json:"server_encryption_public_key_bytes,omitempty"`
	ServerEncryptionPublicKeyType  KEYTYPE              `protobuf:"varint,13,opt,name=server_encryption_public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"server_encryption_public_key_type,omitempty"`
	RegistrationNonce              []byte               `protobuf:"bytes,20,opt,name=registration_nonce,proto3" json:"registration_nonce,omitempty"`
	// If set, the key ID of the wrapping key used to encrypt the private keys
	WrappingKeyId string `protobuf:"bytes,30,opt,name=wrapping_key_id,proto3" json:"wrapping_key_id,omitempty"`
	// State is data that the implementor of a Store can use to round-trip data
	// through this library; as an example, a verison number on the resource for
	// implementing transactions.
	State                 *structpb.Struct `protobuf:"bytes,50,opt,name=state,proto3" json:"state,omitempty"`
	PreviousEncryptionKey *EncryptionKey   `protobuf:"bytes,60,opt,name=previous_encryption_key,proto3" json:"previous_encryption_key,omitempty"`
}

func (x *NodeCredentials) Reset() {
	*x = NodeCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCredentials) ProtoMessage() {}

func (x *NodeCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCredentials.ProtoReflect.Descriptor instead.
func (*NodeCredentials) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{5}
}

func (x *NodeCredentials) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeCredentials) GetCertificatePublicKeyPkix() []byte {
	if x != nil {
		return x.CertificatePublicKeyPkix
	}
	return nil
}

func (x *NodeCredentials) GetCertificatePrivateKeyPkcs8() []byte {
	if x != nil {
		return x.CertificatePrivateKeyPkcs8
	}
	return nil
}

func (x *NodeCredentials) GetCertificatePrivateKeyType() KEYTYPE {
	if x != nil {
		return x.CertificatePrivateKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

func (x *NodeCredentials) GetCertificateBundles() []*CertificateBundle {
	if x != nil {
		return x.CertificateBundles
	}
	return nil
}

func (x *NodeCredentials) GetEncryptionPrivateKeyBytes() []byte {
	if x != nil {
		return x.EncryptionPrivateKeyBytes
	}
	return nil
}

func (x *NodeCredentials) GetEncryptionPrivateKeyType() KEYTYPE {
	if x != nil {
		return x.EncryptionPrivateKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

func (x *NodeCredentials) GetServerEncryptionPublicKeyBytes() []byte {
	if x != nil {
		return x.ServerEncryptionPublicKeyBytes
	}
	return nil
}

func (x *NodeCredentials) GetServerEncryptionPublicKeyType() KEYTYPE {
	if x != nil {
		return x.ServerEncryptionPublicKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

func (x *NodeCredentials) GetRegistrationNonce() []byte {
	if x != nil {
		return x.RegistrationNonce
	}
	return nil
}

func (x *NodeCredentials) GetWrappingKeyId() string {
	if x != nil {
		return x.WrappingKeyId
	}
	return ""
}

func (x *NodeCredentials) GetState() *structpb.Struct {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NodeCredentials) GetPreviousEncryptionKey() *EncryptionKey {
	if x != nil {
		return x.PreviousEncryptionKey
	}
	return nil
}

// FetchNodeCredentialsInfo contains the values bundled and signed into a
// FetchNodeCredentialsRequest. These values contain the ID (for identification,
// although the server should always re-derive this itself), the claimed
// certificate public key (which is also used to sign these values), and the
// public encryption key, as well as the registration nonce.
//
// Because the signature from the certificate public key is across both itself
// and the encryption key, if the key ID is authorized, then after verification
// of the signature we can trust the public encryption key too, which is an
// important property for preventing MITM/replay scenarios.
type FetchNodeCredentialsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Key id derived from pkix public key
	CertificatePublicKeyPkix []byte                 `protobuf:"bytes,2,opt,name=certificate_public_key_pkix,proto3" json:"certificate_public_key_pkix,omitempty"`
	CertificatePublicKeyType KEYTYPE                `protobuf:"varint,3,opt,name=certificate_public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"certificate_public_key_type,omitempty"`
	EncryptionPublicKeyBytes []byte                 `protobuf:"bytes,10,opt,name=encryption_public_key_bytes,proto3" json:"encryption_public_key_bytes,omitempty"`
	EncryptionPublicKeyType  KEYTYPE                `protobuf:"varint,11,opt,name=encryption_public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"encryption_public_key_type,omitempty"`
	Nonce                    []byte                 `protobuf:"bytes,20,opt,name=nonce,proto3" json:"nonce,omitempty"`
	NotBefore                *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=not_before,proto3" json:"not_before,omitempty"`
	NotAfter                 *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=not_after,proto3" json:"not_after,omitempty"`
}

func (x *FetchNodeCredentialsInfo) Reset() {
	*x = FetchNodeCredentialsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNodeCredentialsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNodeCredentialsInfo) ProtoMessage() {}

func (x *FetchNodeCredentialsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNodeCredentialsInfo.ProtoReflect.Descriptor instead.
func (*FetchNodeCredentialsInfo) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{6}
}

func (x *FetchNodeCredentialsInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FetchNodeCredentialsInfo) GetCertificatePublicKeyPkix() []byte {
	if x != nil {
		return x.CertificatePublicKeyPkix
	}
	return nil
}

func (x *FetchNodeCredentialsInfo) GetCertificatePublicKeyType() KEYTYPE {
	if x != nil {
		return x.CertificatePublicKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

func (x *FetchNodeCredentialsInfo) GetEncryptionPublicKeyBytes() []byte {
	if x != nil {
		return x.EncryptionPublicKeyBytes
	}
	return nil
}

func (x *FetchNodeCredentialsInfo) GetEncryptionPublicKeyType() KEYTYPE {
	if x != nil {
		return x.EncryptionPublicKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

func (x *FetchNodeCredentialsInfo) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *FetchNodeCredentialsInfo) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *FetchNodeCredentialsInfo) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

// FetchNodeCredentialsRequest contains the marshaled FetchNodeCredentialsInfo
// message and a signature using private key corresponding to the certificate
// public key contained within the marshaled bundle.
type FetchNodeCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle          []byte `protobuf:"bytes,28,opt,name=bundle,proto3" json:"bundle,omitempty"`
	BundleSignature []byte `protobuf:"bytes,29,opt,name=bundle_signature,proto3" json:"bundle_signature,omitempty"`
}

func (x *FetchNodeCredentialsRequest) Reset() {
	*x = FetchNodeCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNodeCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNodeCredentialsRequest) ProtoMessage() {}

func (x *FetchNodeCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNodeCredentialsRequest.ProtoReflect.Descriptor instead.
func (*FetchNodeCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{7}
}

func (x *FetchNodeCredentialsRequest) GetBundle() []byte {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *FetchNodeCredentialsRequest) GetBundleSignature() []byte {
	if x != nil {
		return x.BundleSignature
	}
	return nil
}

// FetchNodeCredentialsResponse contains a response to a fetch request. If
// unauthorized, only that bool will be returned. If authorized, the encrypted
// node credentials will contain a marshaled NodeCredentials struct containing
// certificates and other server-provided information, with the encryption key
// derived from a DH operation on the node's submitted public key and the
// server's private key corresponding to the given public encryption key.
//
// The encrypted node credentials are signed with the current root certificate
// key. This is an optional step that can be taken by the node if it has
// pre-distributed CA certificates to validate the signature on the encrypted
// node credentials. This mostly is a guard against the failure of an operator
// to actually validate the key ID that they are authorizing.
type FetchNodeCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerEncryptionPublicKeyBytes    []byte  `protobuf:"bytes,12,opt,name=server_encryption_public_key_bytes,json=encryption_public_key_bytes,proto3" json:"server_encryption_public_key_bytes,omitempty"`
	ServerEncryptionPublicKeyType     KEYTYPE `protobuf:"varint,13,opt,name=server_encryption_public_key_type,json=encryption_public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"server_encryption_public_key_type,omitempty"`
	EncryptedNodeCredentials          []byte  `protobuf:"bytes,40,opt,name=encrypted_node_credentials,proto3" json:"encrypted_node_credentials,omitempty"`
	EncryptedNodeCredentialsSignature []byte  `protobuf:"bytes,41,opt,name=encrypted_node_credentials_signature,proto3" json:"encrypted_node_credentials_signature,omitempty"`
}

func (x *FetchNodeCredentialsResponse) Reset() {
	*x = FetchNodeCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNodeCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNodeCredentialsResponse) ProtoMessage() {}

func (x *FetchNodeCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNodeCredentialsResponse.ProtoReflect.Descriptor instead.
func (*FetchNodeCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{8}
}

func (x *FetchNodeCredentialsResponse) GetServerEncryptionPublicKeyBytes() []byte {
	if x != nil {
		return x.ServerEncryptionPublicKeyBytes
	}
	return nil
}

func (x *FetchNodeCredentialsResponse) GetServerEncryptionPublicKeyType() KEYTYPE {
	if x != nil {
		return x.ServerEncryptionPublicKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

func (x *FetchNodeCredentialsResponse) GetEncryptedNodeCredentials() []byte {
	if x != nil {
		return x.EncryptedNodeCredentials
	}
	return nil
}

func (x *FetchNodeCredentialsResponse) GetEncryptedNodeCredentialsSignature() []byte {
	if x != nil {
		return x.EncryptedNodeCredentialsSignature
	}
	return nil
}

// RotateNodeCredentialsRequest is the message used when a node wants to rotate
// credentials
type RotateNodeCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For identification of the node, in case it's not trivial from the
	// connection
	CertificatePublicKeyPkix []byte `protobuf:"bytes,2,opt,name=certificate_public_key_pkix,proto3" json:"certificate_public_key_pkix,omitempty"`
	// Encrypted FetchNodeCredentialsRequest, with the current encryption
	// parameters used for key generation
	EncryptedFetchNodeCredentialsRequest []byte `protobuf:"bytes,45,opt,name=encrypted_fetch_node_credentials_request,proto3" json:"encrypted_fetch_node_credentials_request,omitempty"`
}

func (x *RotateNodeCredentialsRequest) Reset() {
	*x = RotateNodeCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateNodeCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateNodeCredentialsRequest) ProtoMessage() {}

func (x *RotateNodeCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateNodeCredentialsRequest.ProtoReflect.Descriptor instead.
func (*RotateNodeCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{9}
}

func (x *RotateNodeCredentialsRequest) GetCertificatePublicKeyPkix() []byte {
	if x != nil {
		return x.CertificatePublicKeyPkix
	}
	return nil
}

func (x *RotateNodeCredentialsRequest) GetEncryptedFetchNodeCredentialsRequest() []byte {
	if x != nil {
		return x.EncryptedFetchNodeCredentialsRequest
	}
	return nil
}

// RotateNodeCredentialsResponse is the message used to return values
type RotateNodeCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encrypted FetchNodeCredentialsResponse, with the current encryption
	// parameters used for key generation. The new key will be used for the
	// encrypted node credentials in the response.
	EncryptedFetchNodeCredentialsResponse []byte `protobuf:"bytes,45,opt,name=encrypted_fetch_node_credentials_response,proto3" json:"encrypted_fetch_node_credentials_response,omitempty"`
}

func (x *RotateNodeCredentialsResponse) Reset() {
	*x = RotateNodeCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateNodeCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateNodeCredentialsResponse) ProtoMessage() {}

func (x *RotateNodeCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateNodeCredentialsResponse.ProtoReflect.Descriptor instead.
func (*RotateNodeCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{10}
}

func (x *RotateNodeCredentialsResponse) GetEncryptedFetchNodeCredentialsResponse() []byte {
	if x != nil {
		return x.EncryptedFetchNodeCredentialsResponse
	}
	return nil
}

// GenerateServerCertificatesRequest holds values necessary for the server to
// generate a server-side TLS certificate, either for itself or for a middle
// node in a multi-hop scenario. The nonce and signature are provided by the
// authenticating node, so that the server can validate the signature and ensure
// that the node is authorized, then embed the nonce in the returned certificate
// to authorize the upstream node (or server) to the authenticating node.
//
// The common name and skip verification parameters would ideally be options to
// downstream functions, however, since multihop goes over gRPC (or could go
// over some other transport) the options cannot be carried in that way. If
// desired, in the future, an options message could be created and these (and
// any other) values aggregated there.
type GenerateServerCertificatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificatePublicKeyPkix []byte `protobuf:"bytes,2,opt,name=certificate_public_key_pkix,proto3" json:"certificate_public_key_pkix,omitempty"`
	Nonce                    []byte `protobuf:"bytes,20,opt,name=nonce,proto3" json:"nonce,omitempty"`
	NonceSignature           []byte `protobuf:"bytes,21,opt,name=nonce_signature,proto3" json:"nonce_signature,omitempty"`
	CommonName               string `protobuf:"bytes,24,opt,name=common_name,proto3" json:"common_name,omitempty"`
	SkipVerification         bool   `protobuf:"varint,25,opt,name=skip_verification,proto3" json:"skip_verification,omitempty"`
	// State data comes from the client and will be returned both in the returned
	// certificate and in the *protocol.Conn, if used. This must be a marshaled
	// structpb.Struct.
	State []byte `protobuf:"bytes,50,opt,name=state,proto3" json:"state,omitempty"`
	// StateSignature, like with the nonce, is used to be able to trust the data,
	// once the public key has been validated
	StateSignature []byte `protobuf:"bytes,51,opt,name=state_signature,proto3" json:"state_signature,omitempty"`
}

func (x *GenerateServerCertificatesRequest) Reset() {
	*x = GenerateServerCertificatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateServerCertificatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateServerCertificatesRequest) ProtoMessage() {}

func (x *GenerateServerCertificatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateServerCertificatesRequest.ProtoReflect.Descriptor instead.
func (*GenerateServerCertificatesRequest) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{11}
}

func (x *GenerateServerCertificatesRequest) GetCertificatePublicKeyPkix() []byte {
	if x != nil {
		return x.CertificatePublicKeyPkix
	}
	return nil
}

func (x *GenerateServerCertificatesRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *GenerateServerCertificatesRequest) GetNonceSignature() []byte {
	if x != nil {
		return x.NonceSignature
	}
	return nil
}

func (x *GenerateServerCertificatesRequest) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *GenerateServerCertificatesRequest) GetSkipVerification() bool {
	if x != nil {
		return x.SkipVerification
	}
	return false
}

func (x *GenerateServerCertificatesRequest) GetState() []byte {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *GenerateServerCertificatesRequest) GetStateSignature() []byte {
	if x != nil {
		return x.StateSignature
	}
	return nil
}

// GenerateServerCertificatesResponse contains values for a successful response
// to the request: a private key for the server (or intemediate node) to use
// along with the returned certificates.
type GenerateServerCertificatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificatePrivateKeyPkcs8 []byte               `protobuf:"bytes,4,opt,name=certificate_private_key_pkcs8,proto3" json:"certificate_private_key_pkcs8,omitempty"`
	CertificatePrivateKeyType  KEYTYPE              `protobuf:"varint,5,opt,name=certificate_private_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE" json:"certificate_private_key_type,omitempty"`
	CertificateBundles         []*CertificateBundle `protobuf:"bytes,6,rep,name=certificate_bundles,proto3" json:"certificate_bundles,omitempty"`
	// State data is copied here from the request, if verified, and used to
	// populate the protocol.Conn and certificate fields
	State *structpb.Struct `protobuf:"bytes,50,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GenerateServerCertificatesResponse) Reset() {
	*x = GenerateServerCertificatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateServerCertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateServerCertificatesResponse) ProtoMessage() {}

func (x *GenerateServerCertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateServerCertificatesResponse.ProtoReflect.Descriptor instead.
func (*GenerateServerCertificatesResponse) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{12}
}

func (x *GenerateServerCertificatesResponse) GetCertificatePrivateKeyPkcs8() []byte {
	if x != nil {
		return x.CertificatePrivateKeyPkcs8
	}
	return nil
}

func (x *GenerateServerCertificatesResponse) GetCertificatePrivateKeyType() KEYTYPE {
	if x != nil {
		return x.CertificatePrivateKeyType
	}
	return KEYTYPE_UNSPECIFIED
}

func (x *GenerateServerCertificatesResponse) GetCertificateBundles() []*CertificateBundle {
	if x != nil {
		return x.CertificateBundles
	}
	return nil
}

func (x *GenerateServerCertificatesResponse) GetState() *structpb.Struct {
	if x != nil {
		return x.State
	}
	return nil
}

// ServerLedRegistrationRequest is a request for the "operator-led"
// registration flow. Although currently empty it's required to ensure that we
// can add parameters later without an API change.
type ServerLedRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerLedRegistrationRequest) Reset() {
	*x = ServerLedRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerLedRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLedRegistrationRequest) ProtoMessage() {}

func (x *ServerLedRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLedRegistrationRequest.ProtoReflect.Descriptor instead.
func (*ServerLedRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{13}
}

// ServerLedActivationToken contains stored information about a
// one-time-use activation token. The ID is created by the actual returned
// token's nonce HMAC'd by the token's keybytes.
type ServerLedActivationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The time at which this was created; always overwritten on load from
	// creation_time_marshaled
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=creation_time,proto3" json:"creation_time,omitempty"`
	// This stores a marshaled version of the creation time so that it can easily
	// be wrapped
	CreationTimeMarshaled []byte `protobuf:"bytes,11,opt,name=creation_time_marshaled,proto3" json:"creation_time_marshaled,omitempty"`
	// If set, the key ID of the wrapping key used to encrypt the private keys
	WrappingKeyId string `protobuf:"bytes,30,opt,name=wrapping_key_id,proto3" json:"wrapping_key_id,omitempty"`
	// State is data that the implementor of a Store can use to round-trip data
	// through this library; as an example, a verison number on the resource for
	// implementing transactions.
	State *structpb.Struct `protobuf:"bytes,50,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ServerLedActivationToken) Reset() {
	*x = ServerLedActivationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerLedActivationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLedActivationToken) ProtoMessage() {}

func (x *ServerLedActivationToken) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLedActivationToken.ProtoReflect.Descriptor instead.
func (*ServerLedActivationToken) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{14}
}

func (x *ServerLedActivationToken) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServerLedActivationToken) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ServerLedActivationToken) GetCreationTimeMarshaled() []byte {
	if x != nil {
		return x.CreationTimeMarshaled
	}
	return nil
}

func (x *ServerLedActivationToken) GetWrappingKeyId() string {
	if x != nil {
		return x.WrappingKeyId
	}
	return ""
}

func (x *ServerLedActivationToken) GetState() *structpb.Struct {
	if x != nil {
		return x.State
	}
	return nil
}

// ServerLedActivationTokenNonce is the value actually returned to a user.
// The a SHA256-HMAC of the nonce by the key bytes should result in an ID that
// can be found in storage.
type ServerLedActivationTokenNonce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce        []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	HmacKeyBytes []byte `protobuf:"bytes,2,opt,name=hmac_key_bytes,proto3" json:"hmac_key_bytes,omitempty"`
}

func (x *ServerLedActivationTokenNonce) Reset() {
	*x = ServerLedActivationTokenNonce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerLedActivationTokenNonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLedActivationTokenNonce) ProtoMessage() {}

func (x *ServerLedActivationTokenNonce) ProtoReflect() protoreflect.Message {
	mi := &file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLedActivationTokenNonce.ProtoReflect.Descriptor instead.
func (*ServerLedActivationTokenNonce) Descriptor() ([]byte, []int) {
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP(), []int{15}
}

func (x *ServerLedActivationTokenNonce) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ServerLedActivationTokenNonce) GetHmacKeyBytes() []byte {
	if x != nil {
		return x.HmacKeyBytes
	}
	return nil
}

var File_types_github_com_hashicorp_nodeenrollment_types_v1_proto protoreflect.FileDescriptor

var file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDesc = []byte{
	0x0a, 0x38, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x02, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x61, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x12, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xfc, 0x02,
	0x0a, 0x0f, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x6b, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x63, 0x73, 0x38,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x63, 0x73, 0x38, 0x12, 0x61, 0x0a, 0x10, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xa7, 0x02, 0x0a,
	0x10, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x57, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x6b, 0x63, 0x73, 0x38, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x63, 0x73, 0x38, 0x12, 0x61,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x6b, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x12, 0x5f, 0x0a, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe2, 0x07, 0x0a,
	0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b,
	0x69, 0x78, 0x12, 0x77, 0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x1b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x71, 0x0a, 0x13, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x40,
	0x0a, 0x1b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x1b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x75, 0x0a, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x1a, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x23, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x22, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x22, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x75, 0x0a, 0x17, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x22, 0xaa, 0x08, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x6b, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x12, 0x44, 0x0a, 0x1d, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x70, 0x6b, 0x63, 0x73, 0x38, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x63, 0x73, 0x38, 0x12, 0x79, 0x0a,
	0x1c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x1c, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x71, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x1c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x77, 0x0a, 0x1b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x1b, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x22, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x21, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x21, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x75, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xaa,
	0x04, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x12, 0x77, 0x0a,
	0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x1a, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x1b, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xf9,
	0x02, 0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x22, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x21, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x1a, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x24, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x24, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1c, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x12, 0x5a, 0x0a,
	0x28, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x28, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x1d, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x29, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x29, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x87, 0x03, 0x0a, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x70, 0x6b, 0x63, 0x73, 0x38, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x63, 0x73, 0x38, 0x12, 0x79, 0x0a,
	0x1c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x1c, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x71, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xff, 0x01, 0x0a, 0x18, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x73, 0x68,
	0x61, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61,
	0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5d, 0x0a, 0x1d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x6d, 0x61, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x68, 0x6d, 0x61,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2a, 0x33, 0x0a, 0x07, 0x4b,
	0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44, 0x32, 0x35, 0x35,
	0x31, 0x39, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x58, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x02,
	0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescOnce sync.Once
	file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescData = file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDesc
)

func file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescGZIP() []byte {
	file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescOnce.Do(func() {
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescData)
	})
	return file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDescData
}

var file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_goTypes = []interface{}{
	(KEYTYPE)(0),                               // 0: github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	(*CertificateBundle)(nil),                  // 1: github.com.hashicorp.nodeenrollment.types.v1.CertificateBundle
	(*RootCertificate)(nil),                    // 2: github.com.hashicorp.nodeenrollment.types.v1.RootCertificate
	(*RootCertificates)(nil),                   // 3: github.com.hashicorp.nodeenrollment.types.v1.RootCertificates
	(*EncryptionKey)(nil),                      // 4: github.com.hashicorp.nodeenrollment.types.v1.EncryptionKey
	(*NodeInformation)(nil),                    // 5: github.com.hashicorp.nodeenrollment.types.v1.NodeInformation
	(*NodeCredentials)(nil),                    // 6: github.com.hashicorp.nodeenrollment.types.v1.NodeCredentials
	(*FetchNodeCredentialsInfo)(nil),           // 7: github.com.hashicorp.nodeenrollment.types.v1.FetchNodeCredentialsInfo
	(*FetchNodeCredentialsRequest)(nil),        // 8: github.com.hashicorp.nodeenrollment.types.v1.FetchNodeCredentialsRequest
	(*FetchNodeCredentialsResponse)(nil),       // 9: github.com.hashicorp.nodeenrollment.types.v1.FetchNodeCredentialsResponse
	(*RotateNodeCredentialsRequest)(nil),       // 10: github.com.hashicorp.nodeenrollment.types.v1.RotateNodeCredentialsRequest
	(*RotateNodeCredentialsResponse)(nil),      // 11: github.com.hashicorp.nodeenrollment.types.v1.RotateNodeCredentialsResponse
	(*GenerateServerCertificatesRequest)(nil),  // 12: github.com.hashicorp.nodeenrollment.types.v1.GenerateServerCertificatesRequest
	(*GenerateServerCertificatesResponse)(nil), // 13: github.com.hashicorp.nodeenrollment.types.v1.GenerateServerCertificatesResponse
	(*ServerLedRegistrationRequest)(nil),       // 14: github.com.hashicorp.nodeenrollment.types.v1.ServerLedRegistrationRequest
	(*ServerLedActivationToken)(nil),           // 15: github.com.hashicorp.nodeenrollment.types.v1.ServerLedActivationToken
	(*ServerLedActivationTokenNonce)(nil),      // 16: github.com.hashicorp.nodeenrollment.types.v1.ServerLedActivationTokenNonce
	(*timestamppb.Timestamp)(nil),              // 17: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                    // 18: google.protobuf.Struct
}
var file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_depIdxs = []int32{
	17, // 0: github.com.hashicorp.nodeenrollment.types.v1.CertificateBundle.certificate_not_before:type_name -> google.protobuf.Timestamp
	17, // 1: github.com.hashicorp.nodeenrollment.types.v1.CertificateBundle.certificate_not_after:type_name -> google.protobuf.Timestamp
	0,  // 2: github.com.hashicorp.nodeenrollment.types.v1.RootCertificate.private_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	17, // 3: github.com.hashicorp.nodeenrollment.types.v1.RootCertificate.not_before:type_name -> google.protobuf.Timestamp
	17, // 4: github.com.hashicorp.nodeenrollment.types.v1.RootCertificate.not_after:type_name -> google.protobuf.Timestamp
	2,  // 5: github.com.hashicorp.nodeenrollment.types.v1.RootCertificates.current:type_name -> github.com.hashicorp.nodeenrollment.types.v1.RootCertificate
	2,  // 6: github.com.hashicorp.nodeenrollment.types.v1.RootCertificates.next:type_name -> github.com.hashicorp.nodeenrollment.types.v1.RootCertificate
	18, // 7: github.com.hashicorp.nodeenrollment.types.v1.RootCertificates.state:type_name -> google.protobuf.Struct
	0,  // 8: github.com.hashicorp.nodeenrollment.types.v1.EncryptionKey.private_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	0,  // 9: github.com.hashicorp.nodeenrollment.types.v1.EncryptionKey.public_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	0,  // 10: github.com.hashicorp.nodeenrollment.types.v1.NodeInformation.certificate_public_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	1,  // 11: github.com.hashicorp.nodeenrollment.types.v1.NodeInformation.certificate_bundles:type_name -> github.com.hashicorp.nodeenrollment.types.v1.CertificateBundle
	0,  // 12: github.com.hashicorp.nodeenrollment.types.v1.NodeInformation.encryption_public_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	0,  // 13: github.com.hashicorp.nodeenrollment.types.v1.NodeInformation.server_encryption_private_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	18, // 14: github.com.hashicorp.nodeenrollment.types.v1.NodeInformation.state:type_name -> google.protobuf.Struct
	4,  // 15: github.com.hashicorp.nodeenrollment.types.v1.NodeInformation.previous_encryption_key:type_name -> github.com.hashicorp.nodeenrollment.types.v1.EncryptionKey
	0,  // 16: github.com.hashicorp.nodeenrollment.types.v1.NodeCredentials.certificate_private_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	1,  // 17: github.com.hashicorp.nodeenrollment.types.v1.NodeCredentials.certificate_bundles:type_name -> github.com.hashicorp.nodeenrollment.types.v1.CertificateBundle
	0,  // 18: github.com.hashicorp.nodeenrollment.types.v1.NodeCredentials.encryption_private_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	0,  // 19: github.com.hashicorp.nodeenrollment.types.v1.NodeCredentials.server_encryption_public_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	18, // 20: github.com.hashicorp.nodeenrollment.types.v1.NodeCredentials.state:type_name -> google.protobuf.Struct
	4,  // 21: github.com.hashicorp.nodeenrollment.types.v1.NodeCredentials.previous_encryption_key:type_name -> github.com.hashicorp.nodeenrollment.types.v1.EncryptionKey
	0,  // 22: github.com.hashicorp.nodeenrollment.types.v1.FetchNodeCredentialsInfo.certificate_public_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	0,  // 23: github.com.hashicorp.nodeenrollment.types.v1.FetchNodeCredentialsInfo.encryption_public_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	17, // 24: github.com.hashicorp.nodeenrollment.types.v1.FetchNodeCredentialsInfo.not_before:type_name -> google.protobuf.Timestamp
	17, // 25: github.com.hashicorp.nodeenrollment.types.v1.FetchNodeCredentialsInfo.not_after:type_name -> google.protobuf.Timestamp
	0,  // 26: github.com.hashicorp.nodeenrollment.types.v1.FetchNodeCredentialsResponse.server_encryption_public_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	0,  // 27: github.com.hashicorp.nodeenrollment.types.v1.GenerateServerCertificatesResponse.certificate_private_key_type:type_name -> github.com.hashicorp.nodeenrollment.types.v1.KEYTYPE
	1,  // 28: github.com.hashicorp.nodeenrollment.types.v1.GenerateServerCertificatesResponse.certificate_bundles:type_name -> github.com.hashicorp.nodeenrollment.types.v1.CertificateBundle
	18, // 29: github.com.hashicorp.nodeenrollment.types.v1.GenerateServerCertificatesResponse.state:type_name -> google.protobuf.Struct
	17, // 30: github.com.hashicorp.nodeenrollment.types.v1.ServerLedActivationToken.creation_time:type_name -> google.protobuf.Timestamp
	18, // 31: github.com.hashicorp.nodeenrollment.types.v1.ServerLedActivationToken.state:type_name -> google.protobuf.Struct
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_init() }
func file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_init() {
	if File_types_github_com_hashicorp_nodeenrollment_types_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootCertificates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNodeCredentialsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNodeCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNodeCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateNodeCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateNodeCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateServerCertificatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateServerCertificatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerLedRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerLedActivationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerLedActivationTokenNonce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_goTypes,
		DependencyIndexes: file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_depIdxs,
		EnumInfos:         file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_enumTypes,
		MessageInfos:      file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_msgTypes,
	}.Build()
	File_types_github_com_hashicorp_nodeenrollment_types_v1_proto = out.File
	file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_rawDesc = nil
	file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_goTypes = nil
	file_types_github_com_hashicorp_nodeenrollment_types_v1_proto_depIdxs = nil
}
