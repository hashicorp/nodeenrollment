// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: nodetypes/github.com.hashicorp.nodeenrollment.nodetypes.v1.proto

package nodetypes

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KEYTYPE int32

const (
	KEYTYPE_KEYTYPE_UNSPECIFIED KEYTYPE = 0
	KEYTYPE_KEYTYPE_ED25519     KEYTYPE = 1
	KEYTYPE_KEYTYPE_X25519      KEYTYPE = 2
)

// Enum value maps for KEYTYPE.
var (
	KEYTYPE_name = map[int32]string{
		0: "KEYTYPE_UNSPECIFIED",
		1: "KEYTYPE_ED25519",
		2: "KEYTYPE_X25519",
	}
	KEYTYPE_value = map[string]int32{
		"KEYTYPE_UNSPECIFIED": 0,
		"KEYTYPE_ED25519":     1,
		"KEYTYPE_X25519":      2,
	}
)

func (x KEYTYPE) Enum() *KEYTYPE {
	p := new(KEYTYPE)
	*p = x
	return p
}

func (x KEYTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KEYTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_enumTypes[0].Descriptor()
}

func (KEYTYPE) Type() protoreflect.EnumType {
	return &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_enumTypes[0]
}

func (x KEYTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KEYTYPE.Descriptor instead.
func (KEYTYPE) EnumDescriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{0}
}

type CertificateBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeCertificateDer   []byte                 `protobuf:"bytes,1,opt,name=node_certificate_der,proto3" json:"node_certificate_der,omitempty"`
	ServerCertificateDer []byte                 `protobuf:"bytes,2,opt,name=server_certificate_der,proto3" json:"server_certificate_der,omitempty"`
	CertificateNotBefore *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=certificate_not_before,proto3" json:"certificate_not_before,omitempty"`
	CertificateNotAfter  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=certificate_not_after,proto3" json:"certificate_not_after,omitempty"`
}

func (x *CertificateBundle) Reset() {
	*x = CertificateBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateBundle) ProtoMessage() {}

func (x *CertificateBundle) ProtoReflect() protoreflect.Message {
	mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateBundle.ProtoReflect.Descriptor instead.
func (*CertificateBundle) Descriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateBundle) GetNodeCertificateDer() []byte {
	if x != nil {
		return x.NodeCertificateDer
	}
	return nil
}

func (x *CertificateBundle) GetServerCertificateDer() []byte {
	if x != nil {
		return x.ServerCertificateDer
	}
	return nil
}

func (x *CertificateBundle) GetCertificateNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.CertificateNotBefore
	}
	return nil
}

func (x *CertificateBundle) GetCertificateNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.CertificateNotAfter
	}
	return nil
}

// RootCertificate contains information about a root CA certificate and
// associated private key. There may be multiple of these present in the system.
type RootCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // "current" or "next"
	PublicKeyPkix   []byte                 `protobuf:"bytes,2,opt,name=public_key_pkix,proto3" json:"public_key_pkix,omitempty"`
	PrivateKeyPkcs8 []byte                 `protobuf:"bytes,4,opt,name=private_key_pkcs8,proto3" json:"private_key_pkcs8,omitempty"`
	PrivateKeyType  KEYTYPE                `protobuf:"varint,5,opt,name=private_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE" json:"private_key_type,omitempty"`
	CertificateDer  []byte                 `protobuf:"bytes,6,opt,name=certificate_der,proto3" json:"certificate_der,omitempty"`
	NotBefore       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=not_before,proto3" json:"not_before,omitempty"`
	NotAfter        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=not_after,proto3" json:"not_after,omitempty"`
	WrappingKeyId   string                 `protobuf:"bytes,30,opt,name=wrapping_key_id,proto3" json:"wrapping_key_id,omitempty"`
}

func (x *RootCertificate) Reset() {
	*x = RootCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootCertificate) ProtoMessage() {}

func (x *RootCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootCertificate.ProtoReflect.Descriptor instead.
func (*RootCertificate) Descriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{1}
}

func (x *RootCertificate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RootCertificate) GetPublicKeyPkix() []byte {
	if x != nil {
		return x.PublicKeyPkix
	}
	return nil
}

func (x *RootCertificate) GetPrivateKeyPkcs8() []byte {
	if x != nil {
		return x.PrivateKeyPkcs8
	}
	return nil
}

func (x *RootCertificate) GetPrivateKeyType() KEYTYPE {
	if x != nil {
		return x.PrivateKeyType
	}
	return KEYTYPE_KEYTYPE_UNSPECIFIED
}

func (x *RootCertificate) GetCertificateDer() []byte {
	if x != nil {
		return x.CertificateDer
	}
	return nil
}

func (x *RootCertificate) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *RootCertificate) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

func (x *RootCertificate) GetWrappingKeyId() string {
	if x != nil {
		return x.WrappingKeyId
	}
	return ""
}

// NodeInformation contains server-side information about a node -- its
// certificate and the corresponding server key information. Nonce may or may
// not have a value depending on the flow used to register the node. The ID
// corresponds to a key identifier; in a system using this library, a node may
// have multiple of these to accommodate multiple sets of credentials due to
// rotation; it is up to the user of the library to handle that association as
// deemed valid for the use case.
type NodeInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Key id derived from pkix public key
	CertificatePublicKeyPkix        []byte                 `protobuf:"bytes,2,opt,name=certificate_public_key_pkix,proto3" json:"certificate_public_key_pkix,omitempty"`
	CertificatePublicKeyType        KEYTYPE                `protobuf:"varint,3,opt,name=certificate_public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE" json:"certificate_public_key_type,omitempty"`
	CertificateBundles              []*CertificateBundle   `protobuf:"bytes,6,rep,name=certificate_bundles,proto3" json:"certificate_bundles,omitempty"`
	EncryptionPublicKeyBytes        []byte                 `protobuf:"bytes,10,opt,name=encryption_public_key_bytes,proto3" json:"encryption_public_key_bytes,omitempty"`
	EncryptionPublicKeyType         KEYTYPE                `protobuf:"varint,11,opt,name=encryption_public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE" json:"encryption_public_key_type,omitempty"`
	ServerEncryptionPrivateKeyBytes []byte                 `protobuf:"bytes,12,opt,name=server_encryption_private_key_bytes,proto3" json:"server_encryption_private_key_bytes,omitempty"`
	ServerEncryptionPrivateKeyType  KEYTYPE                `protobuf:"varint,13,opt,name=server_encryption_private_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE" json:"server_encryption_private_key_type,omitempty"`
	RegistrationNonce               []byte                 `protobuf:"bytes,20,opt,name=registration_nonce,proto3" json:"registration_nonce,omitempty"`
	FirstSeen                       *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=first_seen,proto3" json:"first_seen,omitempty"`
	Authorized                      bool                   `protobuf:"varint,23,opt,name=authorized,proto3" json:"authorized,omitempty"`
	WrappingKeyId                   string                 `protobuf:"bytes,30,opt,name=wrapping_key_id,proto3" json:"wrapping_key_id,omitempty"`
}

func (x *NodeInformation) Reset() {
	*x = NodeInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInformation) ProtoMessage() {}

func (x *NodeInformation) ProtoReflect() protoreflect.Message {
	mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInformation.ProtoReflect.Descriptor instead.
func (*NodeInformation) Descriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{2}
}

func (x *NodeInformation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeInformation) GetCertificatePublicKeyPkix() []byte {
	if x != nil {
		return x.CertificatePublicKeyPkix
	}
	return nil
}

func (x *NodeInformation) GetCertificatePublicKeyType() KEYTYPE {
	if x != nil {
		return x.CertificatePublicKeyType
	}
	return KEYTYPE_KEYTYPE_UNSPECIFIED
}

func (x *NodeInformation) GetCertificateBundles() []*CertificateBundle {
	if x != nil {
		return x.CertificateBundles
	}
	return nil
}

func (x *NodeInformation) GetEncryptionPublicKeyBytes() []byte {
	if x != nil {
		return x.EncryptionPublicKeyBytes
	}
	return nil
}

func (x *NodeInformation) GetEncryptionPublicKeyType() KEYTYPE {
	if x != nil {
		return x.EncryptionPublicKeyType
	}
	return KEYTYPE_KEYTYPE_UNSPECIFIED
}

func (x *NodeInformation) GetServerEncryptionPrivateKeyBytes() []byte {
	if x != nil {
		return x.ServerEncryptionPrivateKeyBytes
	}
	return nil
}

func (x *NodeInformation) GetServerEncryptionPrivateKeyType() KEYTYPE {
	if x != nil {
		return x.ServerEncryptionPrivateKeyType
	}
	return KEYTYPE_KEYTYPE_UNSPECIFIED
}

func (x *NodeInformation) GetRegistrationNonce() []byte {
	if x != nil {
		return x.RegistrationNonce
	}
	return nil
}

func (x *NodeInformation) GetFirstSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *NodeInformation) GetAuthorized() bool {
	if x != nil {
		return x.Authorized
	}
	return false
}

func (x *NodeInformation) GetWrappingKeyId() string {
	if x != nil {
		return x.WrappingKeyId
	}
	return ""
}

// OperatorLedRegistrationRequest is a request for the "operator-led" registration
// flow. Although currently empty it's required to ensure that we can add
// parameters later without an API change.
type OperatorLedRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OperatorLedRegistrationRequest) Reset() {
	*x = OperatorLedRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorLedRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorLedRegistrationRequest) ProtoMessage() {}

func (x *OperatorLedRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorLedRegistrationRequest.ProtoReflect.Descriptor instead.
func (*OperatorLedRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{3}
}

type OperatorLedRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OperatorLedRegistrationResponse) Reset() {
	*x = OperatorLedRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorLedRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorLedRegistrationResponse) ProtoMessage() {}

func (x *OperatorLedRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorLedRegistrationResponse.ProtoReflect.Descriptor instead.
func (*OperatorLedRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{4}
}

// NodeCredentials is a response to a registration request. It may be fully set
// or partially set by the server, with the node providing the rest of the
// information, based on which flow is used.
type NodeCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // "current" or "next"
	CertificatePublicKeyPkix       []byte               `protobuf:"bytes,2,opt,name=certificate_public_key_pkix,proto3" json:"certificate_public_key_pkix,omitempty"`
	CertificatePrivateKeyPkcs8     []byte               `protobuf:"bytes,4,opt,name=certificate_private_key_pkcs8,proto3" json:"certificate_private_key_pkcs8,omitempty"`
	CertificatePrivateKeyType      KEYTYPE              `protobuf:"varint,5,opt,name=certificate_private_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE" json:"certificate_private_key_type,omitempty"`
	CertificateBundles             []*CertificateBundle `protobuf:"bytes,6,rep,name=certificate_bundles,proto3" json:"certificate_bundles,omitempty"`
	EncryptionPrivateKeyBytes      []byte               `protobuf:"bytes,10,opt,name=encryption_private_key_bytes,proto3" json:"encryption_private_key_bytes,omitempty"`
	EncryptionPrivateKeyType       KEYTYPE              `protobuf:"varint,11,opt,name=encryption_private_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE" json:"encryption_private_key_type,omitempty"`
	ServerEncryptionPublicKeyBytes []byte               `protobuf:"bytes,12,opt,name=server_encryption_public_key_bytes,proto3" json:"server_encryption_public_key_bytes,omitempty"`
	ServerEncryptionPublicKeyType  KEYTYPE              `protobuf:"varint,13,opt,name=server_encryption_public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE" json:"server_encryption_public_key_type,omitempty"`
	RegistrationNonce              []byte               `protobuf:"bytes,20,opt,name=registration_nonce,proto3" json:"registration_nonce,omitempty"`
	WrappingKeyId                  string               `protobuf:"bytes,30,opt,name=wrapping_key_id,proto3" json:"wrapping_key_id,omitempty"`
}

func (x *NodeCredentials) Reset() {
	*x = NodeCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCredentials) ProtoMessage() {}

func (x *NodeCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCredentials.ProtoReflect.Descriptor instead.
func (*NodeCredentials) Descriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{5}
}

func (x *NodeCredentials) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeCredentials) GetCertificatePublicKeyPkix() []byte {
	if x != nil {
		return x.CertificatePublicKeyPkix
	}
	return nil
}

func (x *NodeCredentials) GetCertificatePrivateKeyPkcs8() []byte {
	if x != nil {
		return x.CertificatePrivateKeyPkcs8
	}
	return nil
}

func (x *NodeCredentials) GetCertificatePrivateKeyType() KEYTYPE {
	if x != nil {
		return x.CertificatePrivateKeyType
	}
	return KEYTYPE_KEYTYPE_UNSPECIFIED
}

func (x *NodeCredentials) GetCertificateBundles() []*CertificateBundle {
	if x != nil {
		return x.CertificateBundles
	}
	return nil
}

func (x *NodeCredentials) GetEncryptionPrivateKeyBytes() []byte {
	if x != nil {
		return x.EncryptionPrivateKeyBytes
	}
	return nil
}

func (x *NodeCredentials) GetEncryptionPrivateKeyType() KEYTYPE {
	if x != nil {
		return x.EncryptionPrivateKeyType
	}
	return KEYTYPE_KEYTYPE_UNSPECIFIED
}

func (x *NodeCredentials) GetServerEncryptionPublicKeyBytes() []byte {
	if x != nil {
		return x.ServerEncryptionPublicKeyBytes
	}
	return nil
}

func (x *NodeCredentials) GetServerEncryptionPublicKeyType() KEYTYPE {
	if x != nil {
		return x.ServerEncryptionPublicKeyType
	}
	return KEYTYPE_KEYTYPE_UNSPECIFIED
}

func (x *NodeCredentials) GetRegistrationNonce() []byte {
	if x != nil {
		return x.RegistrationNonce
	}
	return nil
}

func (x *NodeCredentials) GetWrappingKeyId() string {
	if x != nil {
		return x.WrappingKeyId
	}
	return ""
}

type RootCertificates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current *RootCertificate `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Next    *RootCertificate `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *RootCertificates) Reset() {
	*x = RootCertificates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootCertificates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootCertificates) ProtoMessage() {}

func (x *RootCertificates) ProtoReflect() protoreflect.Message {
	mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootCertificates.ProtoReflect.Descriptor instead.
func (*RootCertificates) Descriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{6}
}

func (x *RootCertificates) GetCurrent() *RootCertificate {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *RootCertificates) GetNext() *RootCertificate {
	if x != nil {
		return x.Next
	}
	return nil
}

type FetchNodeCredentialsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Key id derived from pkix public key
	CertificatePublicKeyPkix []byte  `protobuf:"bytes,2,opt,name=certificate_public_key_pkix,proto3" json:"certificate_public_key_pkix,omitempty"`
	CertificatePublicKeyType KEYTYPE `protobuf:"varint,3,opt,name=certificate_public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE" json:"certificate_public_key_type,omitempty"`
	EncryptionPublicKeyBytes []byte  `protobuf:"bytes,10,opt,name=encryption_public_key_bytes,proto3" json:"encryption_public_key_bytes,omitempty"`
	EncryptionPublicKeyType  KEYTYPE `protobuf:"varint,11,opt,name=encryption_public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE" json:"encryption_public_key_type,omitempty"`
	Nonce                    []byte  `protobuf:"bytes,20,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *FetchNodeCredentialsInfo) Reset() {
	*x = FetchNodeCredentialsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNodeCredentialsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNodeCredentialsInfo) ProtoMessage() {}

func (x *FetchNodeCredentialsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNodeCredentialsInfo.ProtoReflect.Descriptor instead.
func (*FetchNodeCredentialsInfo) Descriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{7}
}

func (x *FetchNodeCredentialsInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FetchNodeCredentialsInfo) GetCertificatePublicKeyPkix() []byte {
	if x != nil {
		return x.CertificatePublicKeyPkix
	}
	return nil
}

func (x *FetchNodeCredentialsInfo) GetCertificatePublicKeyType() KEYTYPE {
	if x != nil {
		return x.CertificatePublicKeyType
	}
	return KEYTYPE_KEYTYPE_UNSPECIFIED
}

func (x *FetchNodeCredentialsInfo) GetEncryptionPublicKeyBytes() []byte {
	if x != nil {
		return x.EncryptionPublicKeyBytes
	}
	return nil
}

func (x *FetchNodeCredentialsInfo) GetEncryptionPublicKeyType() KEYTYPE {
	if x != nil {
		return x.EncryptionPublicKeyType
	}
	return KEYTYPE_KEYTYPE_UNSPECIFIED
}

func (x *FetchNodeCredentialsInfo) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type FetchNodeCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle          []byte `protobuf:"bytes,28,opt,name=bundle,proto3" json:"bundle,omitempty"`
	BundleSignature []byte `protobuf:"bytes,29,opt,name=bundle_signature,proto3" json:"bundle_signature,omitempty"`
}

func (x *FetchNodeCredentialsRequest) Reset() {
	*x = FetchNodeCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNodeCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNodeCredentialsRequest) ProtoMessage() {}

func (x *FetchNodeCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNodeCredentialsRequest.ProtoReflect.Descriptor instead.
func (*FetchNodeCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{8}
}

func (x *FetchNodeCredentialsRequest) GetBundle() []byte {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *FetchNodeCredentialsRequest) GetBundleSignature() []byte {
	if x != nil {
		return x.BundleSignature
	}
	return nil
}

type FetchNodeCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerEncryptionPublicKeyBytes    []byte  `protobuf:"bytes,12,opt,name=server_encryption_public_key_bytes,json=encryption_public_key_bytes,proto3" json:"server_encryption_public_key_bytes,omitempty"`
	ServerEncryptionPublicKeyType     KEYTYPE `protobuf:"varint,13,opt,name=server_encryption_public_key_type,json=encryption_public_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE" json:"server_encryption_public_key_type,omitempty"`
	Authorized                        bool    `protobuf:"varint,23,opt,name=authorized,proto3" json:"authorized,omitempty"`
	EncryptedNodeCredentials          []byte  `protobuf:"bytes,40,opt,name=encrypted_node_credentials,proto3" json:"encrypted_node_credentials,omitempty"`
	EncryptedNodeCredentialsSignature []byte  `protobuf:"bytes,41,opt,name=encrypted_node_credentials_signature,proto3" json:"encrypted_node_credentials_signature,omitempty"`
}

func (x *FetchNodeCredentialsResponse) Reset() {
	*x = FetchNodeCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNodeCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNodeCredentialsResponse) ProtoMessage() {}

func (x *FetchNodeCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNodeCredentialsResponse.ProtoReflect.Descriptor instead.
func (*FetchNodeCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{9}
}

func (x *FetchNodeCredentialsResponse) GetServerEncryptionPublicKeyBytes() []byte {
	if x != nil {
		return x.ServerEncryptionPublicKeyBytes
	}
	return nil
}

func (x *FetchNodeCredentialsResponse) GetServerEncryptionPublicKeyType() KEYTYPE {
	if x != nil {
		return x.ServerEncryptionPublicKeyType
	}
	return KEYTYPE_KEYTYPE_UNSPECIFIED
}

func (x *FetchNodeCredentialsResponse) GetAuthorized() bool {
	if x != nil {
		return x.Authorized
	}
	return false
}

func (x *FetchNodeCredentialsResponse) GetEncryptedNodeCredentials() []byte {
	if x != nil {
		return x.EncryptedNodeCredentials
	}
	return nil
}

func (x *FetchNodeCredentialsResponse) GetEncryptedNodeCredentialsSignature() []byte {
	if x != nil {
		return x.EncryptedNodeCredentialsSignature
	}
	return nil
}

type GenerateServerCertificatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificatePublicKeyPkix []byte `protobuf:"bytes,2,opt,name=certificate_public_key_pkix,proto3" json:"certificate_public_key_pkix,omitempty"`
	Nonce                    []byte `protobuf:"bytes,20,opt,name=nonce,proto3" json:"nonce,omitempty"`
	NonceSignature           []byte `protobuf:"bytes,21,opt,name=nonce_signature,proto3" json:"nonce_signature,omitempty"`
	CommonName               string `protobuf:"bytes,24,opt,name=common_name,proto3" json:"common_name,omitempty"`
	SkipVerification         bool   `protobuf:"varint,25,opt,name=skip_verification,proto3" json:"skip_verification,omitempty"`
}

func (x *GenerateServerCertificatesRequest) Reset() {
	*x = GenerateServerCertificatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateServerCertificatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateServerCertificatesRequest) ProtoMessage() {}

func (x *GenerateServerCertificatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateServerCertificatesRequest.ProtoReflect.Descriptor instead.
func (*GenerateServerCertificatesRequest) Descriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{10}
}

func (x *GenerateServerCertificatesRequest) GetCertificatePublicKeyPkix() []byte {
	if x != nil {
		return x.CertificatePublicKeyPkix
	}
	return nil
}

func (x *GenerateServerCertificatesRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *GenerateServerCertificatesRequest) GetNonceSignature() []byte {
	if x != nil {
		return x.NonceSignature
	}
	return nil
}

func (x *GenerateServerCertificatesRequest) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *GenerateServerCertificatesRequest) GetSkipVerification() bool {
	if x != nil {
		return x.SkipVerification
	}
	return false
}

type GenerateServerCertificatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificatePrivateKeyPkcs8 []byte               `protobuf:"bytes,4,opt,name=certificate_private_key_pkcs8,proto3" json:"certificate_private_key_pkcs8,omitempty"`
	CertificatePrivateKeyType  KEYTYPE              `protobuf:"varint,5,opt,name=certificate_private_key_type,proto3,enum=github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE" json:"certificate_private_key_type,omitempty"`
	CertificateBundles         []*CertificateBundle `protobuf:"bytes,6,rep,name=certificate_bundles,proto3" json:"certificate_bundles,omitempty"`
}

func (x *GenerateServerCertificatesResponse) Reset() {
	*x = GenerateServerCertificatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateServerCertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateServerCertificatesResponse) ProtoMessage() {}

func (x *GenerateServerCertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateServerCertificatesResponse.ProtoReflect.Descriptor instead.
func (*GenerateServerCertificatesResponse) Descriptor() ([]byte, []int) {
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP(), []int{11}
}

func (x *GenerateServerCertificatesResponse) GetCertificatePrivateKeyPkcs8() []byte {
	if x != nil {
		return x.CertificatePrivateKeyPkcs8
	}
	return nil
}

func (x *GenerateServerCertificatesResponse) GetCertificatePrivateKeyType() KEYTYPE {
	if x != nil {
		return x.CertificatePrivateKeyType
	}
	return KEYTYPE_KEYTYPE_UNSPECIFIED
}

func (x *GenerateServerCertificatesResponse) GetCertificateBundles() []*CertificateBundle {
	if x != nil {
		return x.CertificateBundles
	}
	return nil
}

var File_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto protoreflect.FileDescriptor

var file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDesc = []byte{
	0x0a, 0x40, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x02, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xaa, 0x03,
	0x0a, 0x0f, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x6b, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x63, 0x73, 0x38,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x63, 0x73, 0x38, 0x12, 0x65, 0x0a, 0x10, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x10,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x6f,
	0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x5f,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x22, 0xa8, 0x07, 0x0a, 0x0f, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78,
	0x12, 0x7b, 0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x52, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x75, 0x0a,
	0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x50, 0x0a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x23,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x22, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x22, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x07, 0x0a, 0x0f, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78,
	0x12, 0x44, 0x0a, 0x1d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x63, 0x73,
	0x38, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x6b, 0x63, 0x73, 0x38, 0x12, 0x7d, 0x0a, 0x1c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x1c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x75, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1c,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x1c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x7b, 0x0a, 0x1b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x52, 0x1b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a,
	0x22, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x22, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x87, 0x01,
	0x0a, 0x21, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x21, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0xbc, 0x03, 0x0a, 0x18, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x69, 0x78, 0x12, 0x7b, 0x0a, 0x1b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x1a, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x1b, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x9e, 0x03, 0x0a,
	0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x22, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x21, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x52, 0x1a, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x24, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x24, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xf5, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x6b, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x02, 0x0a, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x1d,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x63, 0x73, 0x38, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x1d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6b, 0x63,
	0x73, 0x38, 0x12, 0x7d, 0x0a, 0x1c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x45, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x1c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x75, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2a, 0x4b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x32, 0x35,
	0x35, 0x31, 0x39, 0x10, 0x02, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescOnce sync.Once
	file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescData = file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDesc
)

func file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescGZIP() []byte {
	file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescOnce.Do(func() {
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescData)
	})
	return file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDescData
}

var file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_goTypes = []interface{}{
	(KEYTYPE)(0),                               // 0: github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE
	(*CertificateBundle)(nil),                  // 1: github.com.hashicorp.nodeenrollment.nodetypes.v1.CertificateBundle
	(*RootCertificate)(nil),                    // 2: github.com.hashicorp.nodeenrollment.nodetypes.v1.RootCertificate
	(*NodeInformation)(nil),                    // 3: github.com.hashicorp.nodeenrollment.nodetypes.v1.NodeInformation
	(*OperatorLedRegistrationRequest)(nil),     // 4: github.com.hashicorp.nodeenrollment.nodetypes.v1.OperatorLedRegistrationRequest
	(*OperatorLedRegistrationResponse)(nil),    // 5: github.com.hashicorp.nodeenrollment.nodetypes.v1.OperatorLedRegistrationResponse
	(*NodeCredentials)(nil),                    // 6: github.com.hashicorp.nodeenrollment.nodetypes.v1.NodeCredentials
	(*RootCertificates)(nil),                   // 7: github.com.hashicorp.nodeenrollment.nodetypes.v1.RootCertificates
	(*FetchNodeCredentialsInfo)(nil),           // 8: github.com.hashicorp.nodeenrollment.nodetypes.v1.FetchNodeCredentialsInfo
	(*FetchNodeCredentialsRequest)(nil),        // 9: github.com.hashicorp.nodeenrollment.nodetypes.v1.FetchNodeCredentialsRequest
	(*FetchNodeCredentialsResponse)(nil),       // 10: github.com.hashicorp.nodeenrollment.nodetypes.v1.FetchNodeCredentialsResponse
	(*GenerateServerCertificatesRequest)(nil),  // 11: github.com.hashicorp.nodeenrollment.nodetypes.v1.GenerateServerCertificatesRequest
	(*GenerateServerCertificatesResponse)(nil), // 12: github.com.hashicorp.nodeenrollment.nodetypes.v1.GenerateServerCertificatesResponse
	(*timestamppb.Timestamp)(nil),              // 13: google.protobuf.Timestamp
}
var file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_depIdxs = []int32{
	13, // 0: github.com.hashicorp.nodeenrollment.nodetypes.v1.CertificateBundle.certificate_not_before:type_name -> google.protobuf.Timestamp
	13, // 1: github.com.hashicorp.nodeenrollment.nodetypes.v1.CertificateBundle.certificate_not_after:type_name -> google.protobuf.Timestamp
	0,  // 2: github.com.hashicorp.nodeenrollment.nodetypes.v1.RootCertificate.private_key_type:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE
	13, // 3: github.com.hashicorp.nodeenrollment.nodetypes.v1.RootCertificate.not_before:type_name -> google.protobuf.Timestamp
	13, // 4: github.com.hashicorp.nodeenrollment.nodetypes.v1.RootCertificate.not_after:type_name -> google.protobuf.Timestamp
	0,  // 5: github.com.hashicorp.nodeenrollment.nodetypes.v1.NodeInformation.certificate_public_key_type:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE
	1,  // 6: github.com.hashicorp.nodeenrollment.nodetypes.v1.NodeInformation.certificate_bundles:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.CertificateBundle
	0,  // 7: github.com.hashicorp.nodeenrollment.nodetypes.v1.NodeInformation.encryption_public_key_type:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE
	0,  // 8: github.com.hashicorp.nodeenrollment.nodetypes.v1.NodeInformation.server_encryption_private_key_type:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE
	13, // 9: github.com.hashicorp.nodeenrollment.nodetypes.v1.NodeInformation.first_seen:type_name -> google.protobuf.Timestamp
	0,  // 10: github.com.hashicorp.nodeenrollment.nodetypes.v1.NodeCredentials.certificate_private_key_type:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE
	1,  // 11: github.com.hashicorp.nodeenrollment.nodetypes.v1.NodeCredentials.certificate_bundles:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.CertificateBundle
	0,  // 12: github.com.hashicorp.nodeenrollment.nodetypes.v1.NodeCredentials.encryption_private_key_type:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE
	0,  // 13: github.com.hashicorp.nodeenrollment.nodetypes.v1.NodeCredentials.server_encryption_public_key_type:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE
	2,  // 14: github.com.hashicorp.nodeenrollment.nodetypes.v1.RootCertificates.current:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.RootCertificate
	2,  // 15: github.com.hashicorp.nodeenrollment.nodetypes.v1.RootCertificates.next:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.RootCertificate
	0,  // 16: github.com.hashicorp.nodeenrollment.nodetypes.v1.FetchNodeCredentialsInfo.certificate_public_key_type:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE
	0,  // 17: github.com.hashicorp.nodeenrollment.nodetypes.v1.FetchNodeCredentialsInfo.encryption_public_key_type:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE
	0,  // 18: github.com.hashicorp.nodeenrollment.nodetypes.v1.FetchNodeCredentialsResponse.server_encryption_public_key_type:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE
	0,  // 19: github.com.hashicorp.nodeenrollment.nodetypes.v1.GenerateServerCertificatesResponse.certificate_private_key_type:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.KEYTYPE
	1,  // 20: github.com.hashicorp.nodeenrollment.nodetypes.v1.GenerateServerCertificatesResponse.certificate_bundles:type_name -> github.com.hashicorp.nodeenrollment.nodetypes.v1.CertificateBundle
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_init() }
func file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_init() {
	if File_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorLedRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorLedRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootCertificates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNodeCredentialsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNodeCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNodeCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateServerCertificatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateServerCertificatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_goTypes,
		DependencyIndexes: file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_depIdxs,
		EnumInfos:         file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_enumTypes,
		MessageInfos:      file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_msgTypes,
	}.Build()
	File_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto = out.File
	file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_rawDesc = nil
	file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_goTypes = nil
	file_nodetypes_github_com_hashicorp_nodeenrollment_nodetypes_v1_proto_depIdxs = nil
}
