// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package multihop

import (
	context "context"
	types "github.com/hashicorp/nodeenrollment/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultihopServiceClient is the client API for MultihopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultihopServiceClient interface {
	// FetchNodeCredentials provides lookup capability for nodes to fetch
	// credentials.
	FetchNodeCredentials(ctx context.Context, in *types.FetchNodeCredentialsRequest, opts ...grpc.CallOption) (*types.FetchNodeCredentialsResponse, error)
	// GenerateServerCertificates provides a capability to get a server
	// certificate for an incoming fetch or authentication request.
	GenerateServerCertificates(ctx context.Context, in *types.GenerateServerCertificatesRequest, opts ...grpc.CallOption) (*types.GenerateServerCertificatesResponse, error)
}

type multihopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultihopServiceClient(cc grpc.ClientConnInterface) MultihopServiceClient {
	return &multihopServiceClient{cc}
}

func (c *multihopServiceClient) FetchNodeCredentials(ctx context.Context, in *types.FetchNodeCredentialsRequest, opts ...grpc.CallOption) (*types.FetchNodeCredentialsResponse, error) {
	out := new(types.FetchNodeCredentialsResponse)
	err := c.cc.Invoke(ctx, "/github.com.hashicorp.nodeenrollment.multihop.v1.MultihopService/FetchNodeCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multihopServiceClient) GenerateServerCertificates(ctx context.Context, in *types.GenerateServerCertificatesRequest, opts ...grpc.CallOption) (*types.GenerateServerCertificatesResponse, error) {
	out := new(types.GenerateServerCertificatesResponse)
	err := c.cc.Invoke(ctx, "/github.com.hashicorp.nodeenrollment.multihop.v1.MultihopService/GenerateServerCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultihopServiceServer is the server API for MultihopService service.
// All implementations must embed UnimplementedMultihopServiceServer
// for forward compatibility
type MultihopServiceServer interface {
	// FetchNodeCredentials provides lookup capability for nodes to fetch
	// credentials.
	FetchNodeCredentials(context.Context, *types.FetchNodeCredentialsRequest) (*types.FetchNodeCredentialsResponse, error)
	// GenerateServerCertificates provides a capability to get a server
	// certificate for an incoming fetch or authentication request.
	GenerateServerCertificates(context.Context, *types.GenerateServerCertificatesRequest) (*types.GenerateServerCertificatesResponse, error)
	mustEmbedUnimplementedMultihopServiceServer()
}

// UnimplementedMultihopServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultihopServiceServer struct {
}

func (UnimplementedMultihopServiceServer) FetchNodeCredentials(context.Context, *types.FetchNodeCredentialsRequest) (*types.FetchNodeCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchNodeCredentials not implemented")
}
func (UnimplementedMultihopServiceServer) GenerateServerCertificates(context.Context, *types.GenerateServerCertificatesRequest) (*types.GenerateServerCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateServerCertificates not implemented")
}
func (UnimplementedMultihopServiceServer) mustEmbedUnimplementedMultihopServiceServer() {}

// UnsafeMultihopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultihopServiceServer will
// result in compilation errors.
type UnsafeMultihopServiceServer interface {
	mustEmbedUnimplementedMultihopServiceServer()
}

func RegisterMultihopServiceServer(s grpc.ServiceRegistrar, srv MultihopServiceServer) {
	s.RegisterService(&MultihopService_ServiceDesc, srv)
}

func _MultihopService_FetchNodeCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FetchNodeCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultihopServiceServer).FetchNodeCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.hashicorp.nodeenrollment.multihop.v1.MultihopService/FetchNodeCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultihopServiceServer).FetchNodeCredentials(ctx, req.(*types.FetchNodeCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultihopService_GenerateServerCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GenerateServerCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultihopServiceServer).GenerateServerCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.hashicorp.nodeenrollment.multihop.v1.MultihopService/GenerateServerCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultihopServiceServer).GenerateServerCertificates(ctx, req.(*types.GenerateServerCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultihopService_ServiceDesc is the grpc.ServiceDesc for MultihopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultihopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.hashicorp.nodeenrollment.multihop.v1.MultihopService",
	HandlerType: (*MultihopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchNodeCredentials",
			Handler:    _MultihopService_FetchNodeCredentials_Handler,
		},
		{
			MethodName: "GenerateServerCertificates",
			Handler:    _MultihopService_GenerateServerCertificates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multihop/github.com.hashicorp.nodeenrollment.multihop.v1.proto",
}
